{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KRY-project We will encipher/decipher or sign a file by a post quantum algorithm. Development For making it easier for development we created a simple Makefile that let's you do first setup, installation, cleanup and meassuring quality of code. Setup python3 -m venv env # create virtual environment - run only once source ./env/bin/activate # go to virtual environment pip3 install -r requirements.txt # install python libraries Cleanup make remove_out make clear_log Example run Sign a file using SPHINX+. make sign Quality To measure quality of code we use pylint code checker. make pylint We try to stay as high as possible :) 10/10 is the goal. 8/10 at least please :D This checks every python file and prints out collective score I SUGGEST to run pylint yourfile.py for you to know score of your file and keep it above 8.0 Display documentation To display documentation you can run it localy and see in your browser using make documentation or just simply access it on our Github Pages For publishing local changes to the repo run make gh_publish . You will need ssh access to the repo to do this. Changes are applied pretty fast.","title":"Home"},{"location":"#kry-project","text":"We will encipher/decipher or sign a file by a post quantum algorithm.","title":"KRY-project"},{"location":"#development","text":"For making it easier for development we created a simple Makefile that let's you do first setup, installation, cleanup and meassuring quality of code.","title":"Development"},{"location":"#setup","text":"python3 -m venv env # create virtual environment - run only once source ./env/bin/activate # go to virtual environment pip3 install -r requirements.txt # install python libraries","title":"Setup"},{"location":"#cleanup","text":"make remove_out make clear_log","title":"Cleanup"},{"location":"#example-run","text":"Sign a file using SPHINX+. make sign","title":"Example run"},{"location":"#quality","text":"To measure quality of code we use pylint code checker. make pylint We try to stay as high as possible :) 10/10 is the goal. 8/10 at least please :D This checks every python file and prints out collective score I SUGGEST to run pylint yourfile.py for you to know score of your file and keep it above 8.0","title":"Quality"},{"location":"#display-documentation","text":"To display documentation you can run it localy and see in your browser using make documentation or just simply access it on our Github Pages For publishing local changes to the repo run make gh_publish . You will need ssh access to the repo to do this. Changes are applied pretty fast.","title":"Display documentation"},{"location":"about/","text":"Authors Name email work done Pavel Podlu\u017eansk\u00fd 205867@vutbr.cz - Thao Le 243759@vutbr.cz - Anh Viet 243759@vutbr.cz - Jakub Sen\u010d\u00e1k xsenca00@vutbr.cz Git, documentation, hash-based signatures SPHINX+","title":"About us"},{"location":"about/#authors","text":"Name email work done Pavel Podlu\u017eansk\u00fd 205867@vutbr.cz - Thao Le 243759@vutbr.cz - Anh Viet 243759@vutbr.cz - Jakub Sen\u010d\u00e1k xsenca00@vutbr.cz Git, documentation, hash-based signatures SPHINX+","title":"Authors"},{"location":"docs/","text":"General commands For each of our algorithms we use different commands in format algoritm _ action as can be seen bellow. usage: kry.py [-h] [--log] [--onedir] {ntru_g,ntru_e,ntru_d,sphinx_sign,sphinx_verify} ... positional arguments: {ntru_g,ntru_e,ntru_d,sphinx_sign,sphinx_verify} cipher/decipher ntru_g Generating key ntru_e Encrypting message ntru_d Decrypting message sphinx_sign Signing a file sphinx_verify Verifying file signature optional arguments: -h, --help show this help message and exit --log Log to separate file in the generated directory. --onedir Save signature and public key in directory. This option will overwrite existing files. KRY 2022 project - cipher/decipher or sign a file. NTRU usage Generate usage: kry.py ntru_g [-h] [-p PARAMETERS PARAMETERS PARAMETERS] private_file public_file positional arguments: private_file Private key Filename public_file Public key Filename optional arguments: -h, --help show this help message and exit -p PARAMETERS PARAMETERS PARAMETERS, --parameters PARAMETERS PARAMETERS PARAMETERS N p q Encrypt usage: kry.py ntru_e [-h] public_key message positional arguments: public_key message optional arguments: -h, --help show this help message and exit Decrypt usage: kry.py ntru_d [-h] private_key encrypted_message positional arguments: private_key encrypted_message optional arguments: -h, --help show this help message and exit SPHINX+ usage Sign usage: kry.py sphinx_sign [-h] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit Verify usage: kry.py sphinx_verify [-h] [-k PUBLIC_KEY] [-n SIGNATURE] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit -k PUBLIC_KEY, --public_key PUBLIC_KEY File containing public key. -n SIGNATURE, --signature SIGNATURE File containing signature. Examples You can run this test by running make test_sphinx . It will sign the file and then verify it. To show the functionality we change the original file and try to run verification again with (ecpected) unsuccessful result. Signing a file. python3 kry.py --onedir sphinx_sign loremipsum.txt And verifying signature. python3 kry.py --onedir sphinx_verify -s out/loremipsum.txt.signature -k out/loremipsum.txt.pbkey loremipsum.txt","title":"Documentation"},{"location":"docs/#general-commands","text":"For each of our algorithms we use different commands in format algoritm _ action as can be seen bellow. usage: kry.py [-h] [--log] [--onedir] {ntru_g,ntru_e,ntru_d,sphinx_sign,sphinx_verify} ... positional arguments: {ntru_g,ntru_e,ntru_d,sphinx_sign,sphinx_verify} cipher/decipher ntru_g Generating key ntru_e Encrypting message ntru_d Decrypting message sphinx_sign Signing a file sphinx_verify Verifying file signature optional arguments: -h, --help show this help message and exit --log Log to separate file in the generated directory. --onedir Save signature and public key in directory. This option will overwrite existing files. KRY 2022 project - cipher/decipher or sign a file.","title":"General commands"},{"location":"docs/#ntru-usage","text":"","title":"NTRU usage"},{"location":"docs/#generate","text":"usage: kry.py ntru_g [-h] [-p PARAMETERS PARAMETERS PARAMETERS] private_file public_file positional arguments: private_file Private key Filename public_file Public key Filename optional arguments: -h, --help show this help message and exit -p PARAMETERS PARAMETERS PARAMETERS, --parameters PARAMETERS PARAMETERS PARAMETERS N p q","title":"Generate"},{"location":"docs/#encrypt","text":"usage: kry.py ntru_e [-h] public_key message positional arguments: public_key message optional arguments: -h, --help show this help message and exit","title":"Encrypt"},{"location":"docs/#decrypt","text":"usage: kry.py ntru_d [-h] private_key encrypted_message positional arguments: private_key encrypted_message optional arguments: -h, --help show this help message and exit","title":"Decrypt"},{"location":"docs/#sphinx-usage","text":"","title":"SPHINX+ usage"},{"location":"docs/#sign","text":"usage: kry.py sphinx_sign [-h] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit","title":"Sign"},{"location":"docs/#verify","text":"usage: kry.py sphinx_verify [-h] [-k PUBLIC_KEY] [-n SIGNATURE] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit -k PUBLIC_KEY, --public_key PUBLIC_KEY File containing public key. -n SIGNATURE, --signature SIGNATURE File containing signature.","title":"Verify"},{"location":"docs/#examples","text":"You can run this test by running make test_sphinx . It will sign the file and then verify it. To show the functionality we change the original file and try to run verification again with (ecpected) unsuccessful result. Signing a file. python3 kry.py --onedir sphinx_sign loremipsum.txt And verifying signature. python3 kry.py --onedir sphinx_verify -s out/loremipsum.txt.signature -k out/loremipsum.txt.pbkey loremipsum.txt","title":"Examples"},{"location":"todo/","text":"TODO Dokumentace sta\u010d\u00ed v k\u00f3d\u011b Popis spustania k\u00f3du Zasifrovat private kluce aspon SHAXX","title":"TODO"},{"location":"todo/#todo","text":"Dokumentace sta\u010d\u00ed v k\u00f3d\u011b Popis spustania k\u00f3du Zasifrovat private kluce aspon SHAXX","title":"TODO"}]}