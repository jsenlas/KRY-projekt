{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KRY-project We will encipher/decipher or sign a file by a post quantum algorithm. Development For making it easier for development we created a simple Makefile that let's you do first setup, installation, cleanup and meassuring quality of code. Setup and dependencies python3 -m venv env # create virtual environment - run only once source ./env/bin/activate # go to virtual environment pip3 install -r requirements.txt # install python libraries Make sure that you have updated pip3 to the latest version . python3 -m pip install --upgrade pip PySPX package requires installed openssl . E.g. sudo apt -y install libssl-dev . Multivariette package requires Crypto-Vinaigrette repository downloaded into src/ directory. cd src/ git clone https://github.com/aditisrinivas97/Crypto-Vinaigrette cd Crypto-Vinaigrette python3 setup.py install cd ../.. Example run make sign_sphinx # Sign a file using SPHINX+. make sign_code_based # Sign a file using code-based algorithm make sign_multivariate # Sign a file using multivariate Cleanup make remove_out # removes all files in ./out directory make clear_log # clears content from logfile kry_log.log Quality of code To measure quality of code we use pylint code checker. make pylint We try to stay as high as possible :) 10/10 is the goal. 8/10 at least please :D This checks every python file and prints out collective score I SUGGEST to run pylint yourfile.py for you to know score of your file and keep it above 8.0 . Display documentation To display documentation you can run it localy and see in your browser using make documentation or just simply access it on our Github Pages For publishing local changes to the repo run make gh_publish . You will need ssh access to the repo to do this. Changes are applied pretty fast.","title":"Home"},{"location":"#kry-project","text":"We will encipher/decipher or sign a file by a post quantum algorithm.","title":"KRY-project"},{"location":"#development","text":"For making it easier for development we created a simple Makefile that let's you do first setup, installation, cleanup and meassuring quality of code.","title":"Development"},{"location":"#setup-and-dependencies","text":"python3 -m venv env # create virtual environment - run only once source ./env/bin/activate # go to virtual environment pip3 install -r requirements.txt # install python libraries Make sure that you have updated pip3 to the latest version . python3 -m pip install --upgrade pip PySPX package requires installed openssl . E.g. sudo apt -y install libssl-dev . Multivariette package requires Crypto-Vinaigrette repository downloaded into src/ directory. cd src/ git clone https://github.com/aditisrinivas97/Crypto-Vinaigrette cd Crypto-Vinaigrette python3 setup.py install cd ../..","title":"Setup and dependencies"},{"location":"#example-run","text":"make sign_sphinx # Sign a file using SPHINX+. make sign_code_based # Sign a file using code-based algorithm make sign_multivariate # Sign a file using multivariate","title":"Example run"},{"location":"#cleanup","text":"make remove_out # removes all files in ./out directory make clear_log # clears content from logfile kry_log.log","title":"Cleanup"},{"location":"#quality-of-code","text":"To measure quality of code we use pylint code checker. make pylint We try to stay as high as possible :) 10/10 is the goal. 8/10 at least please :D This checks every python file and prints out collective score I SUGGEST to run pylint yourfile.py for you to know score of your file and keep it above 8.0 .","title":"Quality of code"},{"location":"#display-documentation","text":"To display documentation you can run it localy and see in your browser using make documentation or just simply access it on our Github Pages For publishing local changes to the repo run make gh_publish . You will need ssh access to the repo to do this. Changes are applied pretty fast.","title":"Display documentation"},{"location":"about/","text":"Authors Name Email Work done Pavel Podlu\u017eansk\u00fd 205867@vutbr.cz Multivariette cryptogpraphy implementation using Rainbow scheme to sign and verify signatures Thao Le 243759@vutbr.cz Introduction to postquantum cryptography. Encryption and decryption using NTRU algorithm Anh Viet 243759@vutbr.cz Code-based encryption. Implementace of cyphering and decyphering files using McEliece algorithm Jakub Sen\u010d\u00e1k xsenca00@vutbr.cz Git, this documentation, hash-based signatures SPHINX+","title":"About us"},{"location":"about/#authors","text":"Name Email Work done Pavel Podlu\u017eansk\u00fd 205867@vutbr.cz Multivariette cryptogpraphy implementation using Rainbow scheme to sign and verify signatures Thao Le 243759@vutbr.cz Introduction to postquantum cryptography. Encryption and decryption using NTRU algorithm Anh Viet 243759@vutbr.cz Code-based encryption. Implementace of cyphering and decyphering files using McEliece algorithm Jakub Sen\u010d\u00e1k xsenca00@vutbr.cz Git, this documentation, hash-based signatures SPHINX+","title":"Authors"},{"location":"docs/","text":"General commands For each of our algorithms we use different commands in format algoritm _ action as can be seen bellow. usage: kry.py [-h] [--log] [--onedir] {ntru_g,ntru_e,ntru_d,sphinx_sign,sphinx_verify,sign_multivariate,verify_multivariate,encrypt_mceliece,decrypt_mceliece} ... positional arguments: {ntru_g,ntru_e,ntru_d,sphinx_sign,sphinx_verify,sign_multivariate,verify_multivariate,encrypt_mceliece,decrypt_mceliece} cipher/decipher ntru_g Generating key ntru_e Encrypting message ntru_d Decrypting message sphinx_sign Signing a file sphinx_verify Verifying file signature sign_multivariate Signing a file verify_multivariate Verifying file signature encrypt_mceliece Encrypt file using McEliece. decrypt_mceliece Decrypt file using McEliece. optional arguments: -h, --help show this help message and exit --log Log to separate file in the generated directory. --onedir Save signature and public key in directory. This option will overwrite existing files. KRY 2022 project - cipher/decipher or sign a file. SPHINX+ usage Sign usage: kry.py sphinx_sign [-h] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit Verify usage: kry.py sphinx_verify [-h] [-k PUBLIC_KEY] [-s SIGNATURE] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit -k PUBLIC_KEY, --public_key PUBLIC_KEY File containing public key. -s SIGNATURE, --signature SIGNATURE File containing signature. Examples You can run this test by running make test_sphinx . It will sign the file and then verify it. To show the functionality we change the original file and try to run verification again with (ecpected) unsuccessful result. Signing a file. python3 kry.py --onedir sphinx_sign loremipsum.txt And verifying signature. python3 kry.py --onedir sphinx_verify -s out/loremipsum.txt.signature -k out/loremipsum.txt.pbkey loremipsum.txt SPHINX+ usage Sign usage: kry.py sign_multivariate [-h] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit Verify usage: kry.py verify_multivariate [-h] [-k PUBLIC_KEY] [-s SIGNATURE] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit -k PUBLIC_KEY, --public_key PUBLIC_KEY File containing public key. -s SIGNATURE, --signature SIGNATURE File containing signature. NTRU usage Generate usage: kry.py ntru_g [-h] [-p PARAMETERS PARAMETERS PARAMETERS] private_file public_file positional arguments: private_file Private key Filename public_file Public key Filename optional arguments: -h, --help show this help message and exit -p PARAMETERS PARAMETERS PARAMETERS, --parameters PARAMETERS PARAMETERS PARAMETERS N p q Encrypt usage: kry.py ntru_e [-h] public_key encrypted_file message positional arguments: public_key encrypted_file message optional arguments: -h, --help show this help message and exit Decrypt usage: kry.py ntru_d [-h] private_key encrypted_message decrypted_file positional arguments: private_key encrypted_message decrypted_file optional arguments: -h, --help show this help message and exit","title":"Documentation"},{"location":"docs/#general-commands","text":"For each of our algorithms we use different commands in format algoritm _ action as can be seen bellow. usage: kry.py [-h] [--log] [--onedir] {ntru_g,ntru_e,ntru_d,sphinx_sign,sphinx_verify,sign_multivariate,verify_multivariate,encrypt_mceliece,decrypt_mceliece} ... positional arguments: {ntru_g,ntru_e,ntru_d,sphinx_sign,sphinx_verify,sign_multivariate,verify_multivariate,encrypt_mceliece,decrypt_mceliece} cipher/decipher ntru_g Generating key ntru_e Encrypting message ntru_d Decrypting message sphinx_sign Signing a file sphinx_verify Verifying file signature sign_multivariate Signing a file verify_multivariate Verifying file signature encrypt_mceliece Encrypt file using McEliece. decrypt_mceliece Decrypt file using McEliece. optional arguments: -h, --help show this help message and exit --log Log to separate file in the generated directory. --onedir Save signature and public key in directory. This option will overwrite existing files. KRY 2022 project - cipher/decipher or sign a file.","title":"General commands"},{"location":"docs/#sphinx-usage","text":"","title":"SPHINX+ usage"},{"location":"docs/#sign","text":"usage: kry.py sphinx_sign [-h] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit","title":"Sign"},{"location":"docs/#verify","text":"usage: kry.py sphinx_verify [-h] [-k PUBLIC_KEY] [-s SIGNATURE] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit -k PUBLIC_KEY, --public_key PUBLIC_KEY File containing public key. -s SIGNATURE, --signature SIGNATURE File containing signature.","title":"Verify"},{"location":"docs/#examples","text":"You can run this test by running make test_sphinx . It will sign the file and then verify it. To show the functionality we change the original file and try to run verification again with (ecpected) unsuccessful result. Signing a file. python3 kry.py --onedir sphinx_sign loremipsum.txt And verifying signature. python3 kry.py --onedir sphinx_verify -s out/loremipsum.txt.signature -k out/loremipsum.txt.pbkey loremipsum.txt","title":"Examples"},{"location":"docs/#sphinx-usage_1","text":"","title":"SPHINX+ usage"},{"location":"docs/#sign_1","text":"usage: kry.py sign_multivariate [-h] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit","title":"Sign"},{"location":"docs/#verify_1","text":"usage: kry.py verify_multivariate [-h] [-k PUBLIC_KEY] [-s SIGNATURE] file positional arguments: file Filename optional arguments: -h, --help show this help message and exit -k PUBLIC_KEY, --public_key PUBLIC_KEY File containing public key. -s SIGNATURE, --signature SIGNATURE File containing signature.","title":"Verify"},{"location":"docs/#ntru-usage","text":"","title":"NTRU usage"},{"location":"docs/#generate","text":"usage: kry.py ntru_g [-h] [-p PARAMETERS PARAMETERS PARAMETERS] private_file public_file positional arguments: private_file Private key Filename public_file Public key Filename optional arguments: -h, --help show this help message and exit -p PARAMETERS PARAMETERS PARAMETERS, --parameters PARAMETERS PARAMETERS PARAMETERS N p q","title":"Generate"},{"location":"docs/#encrypt","text":"usage: kry.py ntru_e [-h] public_key encrypted_file message positional arguments: public_key encrypted_file message optional arguments: -h, --help show this help message and exit","title":"Encrypt"},{"location":"docs/#decrypt","text":"usage: kry.py ntru_d [-h] private_key encrypted_message decrypted_file positional arguments: private_key encrypted_message decrypted_file optional arguments: -h, --help show this help message and exit","title":"Decrypt"},{"location":"todo/","text":"TODO Documentation in the code Description how to run our code Cipher private keys using any currently used algoritm Official documentation","title":"TODO"},{"location":"todo/#todo","text":"Documentation in the code Description how to run our code Cipher private keys using any currently used algoritm Official documentation","title":"TODO"}]}